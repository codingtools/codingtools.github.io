(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{154:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"rightToc",(function(){return s})),a.d(n,"default",(function(){return h}));a(0);var t=a(163);function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}const i={id:"hash",title:"Hash",sidebar_label:"Hash Command"},s=[{value:"cdt hash [STRING]",id:"cdt-hash-string",children:[]},{value:"Finding hash of a given string for default type ( SHA1 )",id:"finding-hash-of-a-given-string-for-default-type--sha1-",children:[]},{value:"Finding hash of a given string for any type e.g. MD5",id:"finding-hash-of-a-given-string-for-any-type-eg-md5",children:[]},{value:"Finding hash of a given file for any type e.g. MD5",id:"finding-hash-of-a-given-file-for-any-type-eg-md5",children:[]}],r={rightToc:s},b="wrapper";function h({components:e,...n}){return Object(t.b)(b,c({},r,n,{components:e,mdxType:"MDXLayout"}),Object(t.b)("h3",{id:"cdt-hash-string"},Object(t.b)("inlineCode",{parentName:"h3"},"cdt hash [STRING]")),Object(t.b)("p",null,"Hashing functionality for a string/file"),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-bash"}),"USAGE\n  $ cdt hash [STRING]\n\nOPTIONS\n  -f, --file=file      file to be hashed\n  -h, --help           show CLI help\n  -s, --string=string  string to be hashed\n  -t, --type=type      type of hash [SHA1(default), MD5, SHA256, SHA512, RMD160 or RIPEMD160]\n")),Object(t.b)("h3",{id:"finding-hash-of-a-given-string-for-default-type--sha1-"},"Finding hash of a given string for default type ( SHA1 )"),Object(t.b)("hr",null),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-bash"}),"$ cdt hash 'abcde'\n\u2714  success   [SHA1] 03de6c570bfe24bfc328ccd7ca46b76eadaf4334\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"we can also use ",Object(t.b)("strong",{parentName:"li"},Object(t.b)("em",{parentName:"strong"},"-s flag")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-bash"}),"$ cdt hash -s 'abcde'\n\u2714  success   [SHA1] 03de6c570bfe24bfc328ccd7ca46b76eadaf4334\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"Note: ",Object(t.b)("strong",{parentName:"p"},Object(t.b)("em",{parentName:"strong"},"-s flag"))," will override the string passed with argument")),Object(t.b)("h3",{id:"finding-hash-of-a-given-string-for-any-type-eg-md5"},"Finding hash of a given string for any type e.g. MD5"),Object(t.b)("hr",null),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-bash"}),"$ cdt hash -t md5 'abcde'\n\u2714  success   [MD5] ab56b4d92b40713acc5af89985d4b786\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"Note: Possible types SHA1(default), MD5, SHA256, SHA512, RMD160 or RIPEMD160")),Object(t.b)("h3",{id:"finding-hash-of-a-given-file-for-any-type-eg-md5"},"Finding hash of a given file for any type e.g. MD5"),Object(t.b)("hr",null),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-bash"}),"$ cdt hash -t md5 -f ./file.txt\n\u2714  success   [MD5] ab56b4d92b40713acc5af89985d4b786\n")))}h.isMDXComponent=!0}}]);